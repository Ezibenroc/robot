% Test module for the arbiter.

-module(myArbiter_tests).
-include_lib("eunit/include/eunit.hrl").

move_test_() ->
    myArbiter:start(myLists:getState1()),
    arbiter ! {arbiterRequest,self(),action,[move,{1,1},{0,1}]},
    receive OutMap1 -> OutMap1 end,
    arbiter ! {arbiterRequest,self(),action,[move,{1,1},{1,0}]},
    receive OutMap2 -> OutMap2 end,
    arbiter ! {arbiterRequest,self(),action,[move,{9,9},{10,9}]},
    receive OutMap3 -> OutMap3 end,
    arbiter ! {arbiterRequest,self(),action,[move,{9,9},{9,10}]},
    receive OutMap4 -> OutMap4 end,
    arbiter ! {arbiterRequest,self(),action,[move,{1,1},{1,2}]},
    receive Ok -> Ok end,
    arbiter ! {arbiterRequest,self(),action,[move,{5,1},{1,2}]},
    receive TooFar -> TooFar end,
    arbiter ! {arbiterRequest,self(),action,[move,{1,2},{1,3}]},
    receive Block -> Block end,
    arbiter ! {arbiterRequest,self(),action,[move,{1,2},{1,5}]},
    receive TooFar2 -> TooFar2 end,
    arbiter ! {arbiterRequest,self(),action,[move,{9,9},{8,8}]},
    receive Ok2 -> Ok2 end,
    arbiter ! {arbiterRequest,self(),action,[move,{9,1},{9,2}]},
    receive NoRobot -> NoRobot end,
    arbiter ! {arbiterRequest,self(),info,[debug]},
    receive S1 -> S1 end,
    [?_assertEqual(blocked, OutMap1),
    ?_assertEqual(blocked, OutMap2),
    ?_assertEqual(blocked, OutMap3),
    ?_assertEqual(blocked, OutMap4),
    ?_assertEqual(ok, Ok),
    ?_assertEqual(invalid, TooFar),
    ?_assertEqual(blocked, Block),
    ?_assertEqual(invalid, TooFar2),
    ?_assertEqual(ok, Ok2),
    ?_assertEqual(invalid, NoRobot),
    ?_assertEqual({" ",0}, myLists:get_(1,1,element(3,S1))),
    ?_assertEqual({"r",0}, myLists:get_(1,2,element(3,S1)))].

enter_test_() ->
    myArbiter:start(myLists:getState1()),
    arbiter ! {arbiterRequest,self(),action,[enter,3,foo]},
    receive NoEntry -> NoEntry end,
    arbiter ! {arbiterRequest,self(),action,[enter,1,foo]},
    receive Ok -> Ok end,
    arbiter ! {arbiterRequest,self(),action,[enter,1,foo]},
    receive Robot -> Robot end,
    arbiter ! {arbiterRequest,self(),info,[debug]},
    receive S1 -> S1 end,
    [?_assertEqual(invalid, NoEntry),
    ?_assertEqual(ok, Ok),
    ?_assertEqual(blocked, Robot),
    ?_assertEqual({"r",0}, myLists:get_(3,3,element(3,S1)))].

analyze_test_() ->
    myArbiter:start(myLists:getState1()),
    arbiter ! {arbiterRequest,self(),info,[analyze,{1,1},{0,1}]},
    receive OutMap1 -> OutMap1 end,
    arbiter ! {arbiterRequest,self(),info,[analyze,{1,1},{1,0}]},
    receive OutMap2 -> OutMap2 end,
    arbiter ! {arbiterRequest,self(),info,[analyze,{9,9},{10,9}]},
    receive OutMap3 -> OutMap3 end,
    arbiter ! {arbiterRequest,self(),info,[analyze,{9,9},{9,10}]},
    receive OutMap4 -> OutMap4 end,
    arbiter ! {arbiterRequest,self(),info,[analyze,{1,4},{2,4}]},
    receive Block -> Block end,
    arbiter ! {arbiterRequest,self(),info,[analyze,{1,4},{1,5}]},
    receive Empty -> Empty end,
    arbiter ! {arbiterRequest,self(),info,[analyze,{1,4},{1,6}]},
    receive TooFar -> TooFar end,
    arbiter ! {arbiterRequest,self(),info,[analyze,{9,9},{8,9}]},
    receive Gold -> Gold end,
    arbiter ! {arbiterRequest,self(),info,[analyze,{6,2},{6,3}]},
    receive Exit -> Exit end,
    arbiter ! {arbiterRequest,self(),info,[analyze,{9,1},{9,2}]},
    receive NoRobot -> NoRobot end,
    [?_assertEqual(blocked, element(1,OutMap1)),
    ?_assertEqual(blocked, element(1,OutMap2)),
    ?_assertEqual(blocked, element(1,OutMap3)),
    ?_assertEqual(blocked, element(1,OutMap4)),
    ?_assertEqual(blocked, element(1,Block)),
    ?_assertEqual(invalid, TooFar),
    ?_assertEqual(empty, element(1,Empty)),
    ?_assertEqual(gold, element(1,Gold)),
    ?_assertEqual(exit, element(1,Exit)),
    ?_assertEqual(invalid, NoRobot)].

collect_test_() ->
    myArbiter:start(myLists:getState1()),
    arbiter ! {arbiterRequest,self(),action,[collect,{1,1},{0,1},foo]},
    receive OutMap1 -> OutMap1 end,
    arbiter ! {arbiterRequest,self(),action,[collect,{1,1},{1,0},foo]},
    receive OutMap2 -> OutMap2 end,
    arbiter ! {arbiterRequest,self(),action,[collect,{9,9},{10,9},foo]},
    receive OutMap3 -> OutMap3 end,
    arbiter ! {arbiterRequest,self(),action,[collect,{9,9},{9,10},foo]},
    receive OutMap4 -> OutMap4 end,
    arbiter ! {arbiterRequest,self(),action,[collect,{1,4},{2,4},foo]},
    receive Block -> Block end,
    arbiter ! {arbiterRequest,self(),action,[collect,{1,4},{1,5},foo]},
    receive Empty -> Empty end,
    arbiter ! {arbiterRequest,self(),action,[collect,{1,4},{8,9},foo]},
    receive TooFar -> TooFar end,
    arbiter ! {arbiterRequest,self(),action,[collect,{9,9},{8,9},foo]},
    receive Gold -> Gold end,
    arbiter ! {arbiterRequest,self(),action,[collect,{9,9},{8,9},foo]},
    receive NoMoreGold -> NoMoreGold end,
    arbiter ! {arbiterRequest,self(),action,[collect,{9,1},{9,2},foo]},
    receive NoRobot -> NoRobot end,
    [?_assertEqual(invalid, OutMap1),
    ?_assertEqual(invalid, OutMap2),
    ?_assertEqual(invalid, OutMap3),
    ?_assertEqual(invalid, OutMap4),
    ?_assertEqual(invalid, Block),
    ?_assertEqual(invalid, TooFar),
    ?_assertEqual(invalid, Empty),
    ?_assertEqual(ok, Gold),
    ?_assertEqual(invalid, NoMoreGold),
    ?_assertEqual(invalid, NoRobot)].
